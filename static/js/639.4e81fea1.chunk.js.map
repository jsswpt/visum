{"version":3,"file":"static/js/639.4e81fea1.chunk.js","mappings":"oPAce,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,IAASC,EAAAA,IAEvBC,GAASF,EAAAA,EAAAA,IAASG,EAAAA,IAExB,OACE,SAAC,KAAM,CACLC,cACa,OAAXF,EACI,KACW,OAAXA,GAEW,OAAXA,EADA,KAGA,KAENG,gBAAc,EACdC,MAAI,EACJC,aAAc,GAAG,SAEhBR,EAAYS,KAAI,SAACC,GAAI,OACpB,SAAC,KAAW,WACV,SAAC,IAAQ,CACPC,GAAID,EAAKC,GACTC,UAAWF,EAAKE,UAChBC,WAAYH,EAAKG,WACjBC,SAAUJ,EAAKK,KACfC,KAAMN,EAAKM,KACXC,WAAYP,EAAKO,WACjBC,QAAS,SAACP,GAAE,OAAKb,EAASqB,EAAAA,GAAAA,KAAwBR,EAAG,KARvCD,EAAKC,GAUT,KAItB,C,iGClDA,GAAgB,UAAY,0BAA0B,QAAU,wBAAwB,QAAU,wBAAwB,eAAiB,+BAA+B,cAAgB,8BAA8B,UAAY,0BAA0B,iBAAmB,iCAAiC,WAAa,2BAA2B,YAAc,4BAA4B,eAAiB,+BAA+B,KAAO,qBAAqB,OAAS,uBAAuB,SAAW,0B,UCA3f,EAAuB,qB,SCMvB,SAASS,EAAKC,EAAaC,GACzB,OACE,kCAASD,GAAK,IAAEC,IAAKA,EAAKC,UAAWC,IAAWC,EAASJ,EAAME,WAAW,SACvEF,EAAMK,WAGb,CAEA,IACA,GADgBC,EAAAA,EAAAA,YAAiCP,GCMlC,SAASQ,EAASP,GAC/B,IAAMQ,GAAUC,EAAAA,EAAAA,aAQhB,OAPAC,EAAAA,EAAAA,YAAU,WACJV,EAAMH,SACJW,EAAQG,UACVH,EAAQG,QAAQC,MAAMC,OAAS,UAGrC,GAAG,CAACL,KAEF,UAAC,EAAI,CACHP,IAAKO,EACLN,UAAWE,EAAAA,UACXP,QAAS,WACHG,EAAMH,SACRG,EAAMH,QAAQG,EAAMV,GAExB,EAAE,WAEF,gBAAKY,UAAWE,EAAAA,QAAW,UACzB,gBACEU,QAAQ,OACRC,IAAKf,EAAMR,WACXwB,IAAG,uBAAahB,EAAMV,GAAE,YACxBY,UAAWE,EAAAA,aAGf,iBAAKF,UAAWE,EAAAA,eAAkB,WAChC,gBAAKF,UAAWE,EAAAA,cAAiB,UAC/B,cAAGF,UAAWE,EAAAA,UAAa,SAAEJ,EAAMP,cAErC,iBAAKS,UAAWE,EAAAA,iBAAoB,WAClC,iBAAKF,UAAWC,IAAWC,EAAAA,YAAgBA,EAAAA,gBAAmB,UAC5C,YAAfJ,EAAML,MACL,SAAC,MAAa,CAACO,UAAWC,IAAWC,EAAAA,KAASA,EAAAA,WAE9C,SAAC,MAAiB,CAACF,UAAWC,IAAWC,EAAAA,KAASA,EAAAA,aAGpD,cAAGF,UAAWE,EAAAA,WAAc,SAAEJ,EAAMT,gBAEtC,iBAAKW,UAAWE,EAAAA,YAAe,WAC7B,SAAC,MAAe,CAACF,UAAWC,IAAWC,EAAAA,KAASA,EAAAA,WAChD,cAAGF,UAAWE,EAAAA,WAAc,SAAEJ,EAAMJ,wBAMhD,C","sources":["entities/room/ui/recent-rooms/recent-rooms.tsx","webpack://visum/./src/shared/ui/room-card/styles.module.scss?1003","webpack://visum/./src/shared/ui/card/styles.module.scss?6797","shared/ui/card/card.tsx","shared/ui/room-card/room-card.tsx"],"sourcesContent":["import { useStore } from \"effector-react\";\r\nimport { $recentRooms } from \"entities/room\";\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/scrollbar\";\r\nimport RoomCard from \"shared/ui/room-card/room-card\";\r\n\r\nimport { $screen } from \"shared/idk/screen/screen\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { publicNavigation } from \"shared/api/internal/consts/routes\";\r\n\r\nimport st from \"./styles.module.scss\";\r\n\r\nexport default function RecentRoomsChunk() {\r\n  const navigate = useNavigate();\r\n\r\n  const recentRooms = useStore($recentRooms);\r\n\r\n  const screen = useStore($screen);\r\n\r\n  return (\r\n    <Swiper\r\n      slidesPerView={\r\n        screen === \"xs\"\r\n          ? 1.25\r\n          : screen === \"sm\"\r\n          ? 2.25\r\n          : screen === \"md\"\r\n          ? 2.25\r\n          : 3.25\r\n      }\r\n      centeredSlides\r\n      loop\r\n      spaceBetween={16}\r\n    >\r\n      {recentRooms.map((room) => (\r\n        <SwiperSlide key={room.id}>\r\n          <RoomCard\r\n            id={room.id}\r\n            ownerName={room.ownerName}\r\n            previewUrl={room.previewUrl}\r\n            roomName={room.name}\r\n            type={room.type}\r\n            usersCount={room.usersCount}\r\n            onClick={(id) => navigate(publicNavigation.ROOM + id)}\r\n          />\r\n        </SwiperSlide>\r\n      ))}\r\n    </Swiper>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"room_card\":\"styles_room_card__UqAyn\",\"card_bg\":\"styles_card_bg__wK0kd\",\"preview\":\"styles_preview__SoPj0\",\"room_info_wrap\":\"styles_room_info_wrap__uGXqB\",\"info_wrap_top\":\"styles_info_wrap_top__acTsu\",\"room_name\":\"styles_room_name__3mrdD\",\"info_wrap_bottom\":\"styles_info_wrap_bottom__s+Sbc\",\"info_title\":\"styles_info_title__d-SZt\",\"bottom_wrap\":\"styles_bottom_wrap__jV2bZ\",\"ownerName_wrap\":\"styles_ownerName_wrap__+p3Bs\",\"icon\":\"styles_icon__BJ8Yz\",\"locked\":\"styles_locked__cOamf\",\"unlocked\":\"styles_unlocked__ZijWQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"styles_card__4wNC7\"};","import classNames from \"classnames\";\r\nimport { HTMLAttributes, forwardRef } from \"react\";\r\n\r\nimport st from \"./styles.module.scss\";\r\n\r\ninterface Card extends HTMLAttributes<HTMLDivElement> {}\r\n\r\nfunction Card(props: Card, ref: React.ForwardedRef<HTMLDivElement>) {\r\n  return (\r\n    <div {...props} ref={ref} className={classNames(st.card, props.className)}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CardRef = forwardRef<HTMLDivElement, Card>(Card);\r\nexport default CardRef;\r\n","import { useEffect, createRef } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {\r\n  MdLockOutline,\r\n  MdOutlineLockOpen,\r\n  MdPersonOutline,\r\n} from \"react-icons/md\";\r\n\r\nimport st from \"./styles.module.scss\";\r\nimport Card from \"../card/card\";\r\n\r\ntype RoomCard = {\r\n  id: number;\r\n  previewUrl: string;\r\n  ownerName: string;\r\n  type: \"private\" | \"public\";\r\n  roomName: string;\r\n  usersCount: number;\r\n  onClick?: (id: number) => void;\r\n};\r\n\r\nexport default function RoomCard(props: RoomCard) {\r\n  const cardRef = createRef<HTMLDivElement>();\r\n  useEffect(() => {\r\n    if (props.onClick) {\r\n      if (cardRef.current) {\r\n        cardRef.current.style.cursor = \"pointer\";\r\n      }\r\n    }\r\n  }, [cardRef]);\r\n  return (\r\n    <Card\r\n      ref={cardRef}\r\n      className={st.room_card}\r\n      onClick={() => {\r\n        if (props.onClick) {\r\n          props.onClick(props.id);\r\n        }\r\n      }}\r\n    >\r\n      <div className={st.card_bg}>\r\n        <img\r\n          loading=\"lazy\"\r\n          src={props.previewUrl}\r\n          alt={`Room's â„–${props.id} preview`}\r\n          className={st.preview}\r\n        />\r\n      </div>\r\n      <div className={st.room_info_wrap}>\r\n        <div className={st.info_wrap_top}>\r\n          <p className={st.room_name}>{props.roomName}</p>\r\n        </div>\r\n        <div className={st.info_wrap_bottom}>\r\n          <div className={classNames(st.bottom_wrap, st.ownerName_wrap)}>\r\n            {props.type === \"private\" ? (\r\n              <MdLockOutline className={classNames(st.icon, st.locked)} />\r\n            ) : (\r\n              <MdOutlineLockOpen className={classNames(st.icon, st.unlocked)} />\r\n            )}\r\n\r\n            <p className={st.info_title}>{props.ownerName}</p>\r\n          </div>\r\n          <div className={st.bottom_wrap}>\r\n            <MdPersonOutline className={classNames(st.icon, st.person)} />\r\n            <p className={st.info_title}>{props.usersCount}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n"],"names":["RecentRoomsChunk","navigate","useNavigate","recentRooms","useStore","$recentRooms","screen","$screen","slidesPerView","centeredSlides","loop","spaceBetween","map","room","id","ownerName","previewUrl","roomName","name","type","usersCount","onClick","publicNavigation","Card","props","ref","className","classNames","st","children","forwardRef","RoomCard","cardRef","createRef","useEffect","current","style","cursor","loading","src","alt"],"sourceRoot":""}